async function initProjectDownloader(){
  var reg = (o, n) => o ? o[n] : '';
  var cn = (o, s) => o ? o.getElementsByClassName(s) : console.log(o);
  var tn = (o, s) => o ? o.getElementsByTagName(s) : console.log(o);
  var gi = (o, s) => o ? o.getElementById(s) : console.log(o);
  var noHTML = (s) => s ? s.replace(/<.+?>/g, '').replace(/\s+/g, ' ').replace(/&.+?;/g, '') : '';
  var delay = (ms) => new Promise(res => setTimeout(res, ms));
  var cleanName = (s) => s ? s.replace(/(?<=^.+?)\s+-\s+.+|(?<=^.+?)\s*[sSJj][Rr].+|(?<=^.+?)\s*(III|IV|II).*|(?<=^.+?)\b,.*|(?<=^.+?)\s*\(.*/, '') : '';
  var fixCase = (s) => s ? s.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()) : s;
  var timer = new Date().getTime().toString().replace(/\d{4}$/, '0000');
  var rando = (n) => Math.round(Math.random() * n);
  var fixDate = (s) => s ? s.replace(/[a-zA-Z]+/, s.replace(/(?<=[a-zA-Z]{3}).+/g, '')) : '';
  var parseDate = (o) => o ? new Date(o).getTime() : now;
  var milsec2Month = (n) => Math.round(n / 2.628e+9);
  var now = new Date().getTime();

  var ele = (t) => document.createElement(t);
  var attr = (o, k, v) => o.setAttribute(k, v);

  var a = (l, r) => r.forEach(a => attr(l, a[0], a[1]));

  var reChar = (s) => typeof s == 'string' && s.match(/&#\d+;/g) && s.match(/&#\d+;/g).length > 0 ? s.match(/&#\d+;/g).map(el => [el, String.fromCharCode(reg(/(?<=&#).+?(?=;)/.exec(el),0))]).map(m => s = s.replace(new RegExp(m[0], 'i'), m[1])).pop() : s;
  var noHtmlEntities = (s) => typeof s == 'string' ? s.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/&apos;/g, "'").replace(/&nbsp;/g, ' ') : s;

  async function getPeopleFromProject(id, p) {
    var res = await fetch("https://www.linkedin.com/recruiter/api/projects/" + id + "/profiles?count=25&start=" + p);
    var d = await res.json();
    console.log(d);
    return d;
  }

  async function getAllPeopleFromProject() {
    createDownloadHTML();
    var containArr = [];
    var projectId = reg(/(?<=projectId=)\d+/.exec(window.location.href), 0);
    var res1 = await getPeopleFromProject(projectId, 0);
    var searchHits2 = res1 && res1.result && res1.result.searchHits && res1.result.searchHits.length ? res1.result.searchHits : [];

    var total = res1 && res1.result && res1.result.paging && res1.result.paging.total ? res1.result.paging.total : 0;
    if (total == 0) {
      console.log('failed to get the total number of people in project');
    }else{
      if (searchHits2.length > 0) searchHits2.forEach(el => containArr.push(el));

      for (var i = 25; i < total; i = i + 25) { 
        var res = await getPeopleFromProject(projectId, i);
        var searchHits = res && res.result && res.result.searchHits && res.result.searchHits.length ? res.result.searchHits : [];
        
        gi(document,'downloading_percentage_bar').style.width = `${(330*(i/total))}px`;
        gi(document,'downloading_percentage_txt').innerText = `${Math.ceil((i/total)*100)}% complete`;
        if (searchHits.length > 0) {
          searchHits.forEach(el => {
            if(containArr.every(itm=> el.niid != itm.niid)) containArr.push(el);
          });
        }
        await delay(rando(2020)+400);
      }
      gi(document,'downloading_percentage_bar').style.width = `330px`;
      gi(document,'downloading_percentage_txt').innerText = `100% complete`;
     downloadAsTsv(containArr);
    }
  }

  function createDownloadHTML(){
    if(gi(document,'downloading_notifier')) gi(document,'downloading_notifier').outerHTML = '';
    var cont  = ele('div');
    a(cont,[['id', 'downloading_notifier'],['style',`position: fixed; top: 100px; left: 10%; width: 330px; z-index: ${new Date().getTime()}; background: #121212; border: 1px solid #3de367; border-radius: 0.2em;`]]);
    document.body.appendChild(cont);
    
    var perc = ele('div');
    a(perc,[['id','downloading_percentage_bar'],['style',`width: 0px; height: 50px; background: #3de367; border: 1px solid #3de367; border-bottom-right-radius: 0.2em; border-top-right-radius: 0.2em;`]]); 
    cont.appendChild(perc);
   
    var txt = ele('div');
    a(txt,[['id','downloading_percentage_txt'],['style',`float: left; padding: 14px; color: #fff; width: 300px;`]]);
    perc.appendChild(txt);
    txt.innerText = 'initiating download...';
  }

  function downloadr(arr2D, filename) {
    var data = /\.json$|.js$/.test(filename) ? JSON.stringify(arr2D) : arr2D.map(el => el.reduce((a, b) => a + '\t' + b)).reduce((a, b) => a + '\r' + b);
    var type = /\.json$|.js$/.test(filename) ? 'data:application/json;charset=utf-8,' : 'data:text/plain;charset=utf-8,';
    var file = new Blob([data], {
      type: type
    });
    if (window.navigator.msSaveOrOpenBlob) {
      window.navigator.msSaveOrOpenBlob(file, filename);
    } else {
      var a = document.createElement('a'),
      url = URL.createObjectURL(file);
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      setTimeout(() => {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
      }, 10);
    }
  }
  function downloadAsTsv(arr){
    var projectId = reg(/(?<=projectId=)\d+/.exec(window.location.href), 0);
    var header = [[
    'Public Profile',
    'LIR Profile',
    'First Name',
    'Last Name',
    'Location',
    'Current Employer',
    'Current Title',
    'Months in Current Job',
    'Previous Employer',
    'Previous Title',
    'Months in Previous Job',
    'Education 1',
    'Education 1 Date',
    'Education 2',
    'Education 2 Date',
    'Status',
    'Job Seeker',
    'Preferred Titles',
    'Email',
    'Phone',
    'Applications',
    'Notes'
    ]];
    var tsv = arr.map(el=> to2dArr(el));
    var table = header.concat(tsv);
    downloadr(table, `${projectId}_${new Date().getTime()}_.tsv`);
  }

  function getTimeInJob(job) {
    if(job){
      var start = job ? parseDate(job.i18nStartDate) : now;
      var end = job ? parseDate(job.i18nEndDate) : now;
      var timeInJob = milsec2Month(end - start) ? milsec2Month(end - start) : 0;
      return timeInJob;
    }else{
      return '';
    }
  }

  function getStatus(obj, id) {
    var status = obj.projectStatuses;
    if (status) {
      for (var i = 0; i < status.length; i++) {
        if (status[i].projectId == id) {
          return status[i].status.text;
        }
      }
    } else {
      return '';
    }
  }

  function to2dArr(obj) {
    var curUrl = window.location.href;
    var projectId = reg(/(?<=projectId=)\d+/.exec(curUrl), 0);
    var status = getStatus(obj, projectId);
    var csvReady = (s) => s ? s.replace(/&amp;/g, '&').replace(/&quot;/g, '"').replace(/\t/g,' ') : '';
    var validx = (el) => el ? el : null;
    var seekingJob = obj.isJobSeeker || obj.careerInterests ? 'yes' : 'no';
    var seekingTitleArr = obj.careerInterests ? obj.careerInterests.interestedTitles : null;
    var seekingTitles = seekingTitleArr ? seekingTitleArr.toString() : '';
    var lirPathLink = 'https://www.linkedin.com/recruiter/profile/' + obj.memberId + ',' + obj.authToken + ',' + obj.authType;
    var job1 = obj.positions ? validx(obj.positions[0]) : null;
    var job2 = obj.positions ? validx(obj.positions[1]) : null;
    var jobTime1 = job1 ? getTimeInJob(job1) : 0;
    var jobTime2 = job2 ? getTimeInJob(job2) : 0;
    var empl1 = job1 ? noHtmlEntities(reChar(job1.companyName)) : ' ';
    var empl2 = job2 ? noHtmlEntities(reChar(job2.companyName)) : ' ';
    var title1 = job1 ? noHtmlEntities(reChar(job1.title)) : ' ';
    var title2 = job2 ? noHtmlEntities(reChar(job2.title)) : ' ';
    var publink = 'www.linkedin.com/in/' + obj.niid;
    var edu1 = obj.educations && obj.educations[0] ? obj.educations[0].schoolName : ' ';
    var edu2 = obj.educations && obj.educations[1] ? obj.educations[1].schoolName : ' ';
    var edu1end = obj.educations && obj.educations[0] ? obj.educations[0].i18nEndDate : ' ';
    var edu2end = obj.educations && obj.educations[1] ? obj.educations[1].i18nEndDate : ' ';
    var emailArr = obj.contactEmails ? obj.contactEmails : [];
    var emails = emailArr.length > 0 ? emailArr.map(m => m.email).toString() : null;
    var phoneArr = obj.contactPhones ? obj.contactPhones : [];
    var phones = phoneArr.length > 0 ? phoneArr.map(m => m.phone).toString() : null;
    var appArr = obj.jobApplications ? obj.jobApplications : [];
    var apps = appArr.length > 0 ? appArr.map(m => m.applyStarterJobId).toString() : null;
    var noteArr = obj.notes ? obj.notes : [];
    var notes = noteArr.length > 0 ? noHtmlEntities(noteArr.map(m => m.note.replace(/\n/g, ' _ ')).toString()) : null;
    var emailX = /[\w|\.]+@\S+\.[a-zA-Z]+/;
    var phoneX = /((\d+\W*)\d*|)\d{3}\W*\d{3}\W*\d{4}/;
    var em = (emailX.test(notes) === true && emailX.test(emails) === false) ? reg(emailX.exec(notes), 0) : emails;
    var ph = (phoneX.test(notes) === true && phoneX.test(phones) === false) ? reg(phoneX.exec(notes), 0) : phones;
    return [
    publink, 
    lirPathLink, 
    fixCase(noHtmlEntities(reChar(obj.firstName))),
    fixCase(noHtmlEntities(reChar(obj.lastName))),
    csvReady(obj.location),
    noHtmlEntities(reChar(csvReady(empl1))),
    noHtmlEntities(reChar(csvReady(title1))), 
    jobTime1 != undefined ? jobTime1 : ' ',
    noHtmlEntities(reChar(csvReady(empl2))), 
    noHtmlEntities(reChar(csvReady(title2))),
    jobTime2 != undefined ? jobTime2 : ' ',
    noHtmlEntities(reChar(csvReady(edu1))),
    edu1end != undefined ? edu1end : ' ',
    noHtmlEntities(reChar(csvReady(edu2))),
    edu2end != undefined ? edu2end : ' ',
    status,
    seekingJob,
    seekingTitles,
    em ? em : '',
    ph ? ph : '',
    apps ? apps : '',
    notes ? notes : ''
    ];
  }

  getAllPeopleFromProject();
}

 
initProjectDownloader();
