var reg = (elm, n) => elm != null ? elm[n] : '';

var cn = (ob, nm) => ob.getElementsByClassName(nm);

var tn = (ob, nm) => ob.getElementsByTagName(nm);

var gi = (ob, nm) => ob.getElementById(nm);

var noHTML = (str) => str.replace(/<.+?>/g, '').replace(/\s+/g, ' ').replace(/&.+?;/g, '');

var delay = (ms) => new Promise(res => setTimeout(res, ms));

var reg = (elm, n) => elm != null ? elm[n] : '';
var delay = (ms) => new Promise(res => setTimeout(res, ms));

function skillsCleaner(arr) {
  if (arr == null) return null;
  var temp = [];
  arr.forEach(itm => /,/.test(itm) ? itm.split(',').forEach(elm => temp.push(elm)) : temp.push(itm));
  return temp;
}

function getLIRlink() {
  var atags = document.getElementsByTagName('a');
  for (i = 0; i < atags.length; i++) {
    var lirAttr = atags[i].getAttribute('data-control-name');
    if (lirAttr == 'view_profile_in_recruiter') {
      return atags[i].href
    }
  }
}

function normalize(str) {
  var arr = Array.from(str);
  var temp = '';
  arr.forEach(itm => /[A-Z]/.test(itm) ? temp = temp + ' ' + itm : temp = temp + itm);
  return temp;
}

function cleanName(str) {
  return str.replace(/(?<=^.+?)\s+-\s+.+|(?<=^.+?)\s*[sSJj][Rr].+|(?<=^.+?)\s*(III|IV|II).*|(?<=^.+?)\b,.*|(?<=^.+?)\s*\(.*/, '');
}

function fixCase(fullname) {
  return fullname.replace(/\w\S*/g, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
}

function fixDate(str) {
  if (str == null) return '';
  var three = str.replace(/(?<=[a-zA-Z]{3}).+/g, '');
  return str.replace(/[a-zA-Z]+/, three);
}
function getGeos(){
	var cont = cn(document,'location searchable')[0];
	var atag = cont ? tn(cont, 'a')[0] : null;
	var href = atag ? atag.href : null;
	var postal = href ? reg(/(?<=postalCode\=)\d+/.exec(href),0) : '';
	if(/\d{5}/.test(postal)){
		return '&radiusMiles=50&countryCode=us&postalCode=' + postal;
    }else{
		return ''; 
	}
}

var curUrl = window.location.href;
var profilePath = /(?<=recruiter\/profile\/).+?(?=\?|$)/.exec(curUrl);
console.log(profilePath[0]);
function loadingElm(){
  var loaD = document.createElement("div");
  loaD.setAttribute("id", "loader-elm");
  document.body.appendChild(loaD);
  loaD.style.top = '10%';
  loaD.style.right = '6%';
  loaD.style.position = "fixed";
  loaD.style.zIndex = "10001";
  loaD.innerHTML = '<svg version="1.1" id="Layer_1" x="0px" y="0px"     width="200px" height="200px" viewBox="0 0 24 30" style="enable-background:new 0 0 50 50;">    <rect x="0" y="10" width="4" height="0" fill="#333" opacity="0.2">      <animate attributeName="opacity" values="0.2; 1; .2" begin="0s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="height" values="10; 20; 10" begin="0s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="y"values="10; 5; 10" begin="0s" dur="555ms" repeatCount="indefinite" />    </rect>    <rect x="8" y="10" width="4" height="10" fill="#333"  opacity="0.2">      <animate attributeName="opacity" values="0.2; 1; .2" begin="0.15s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="height" values="10; 20; 10" begin="0.15s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="y" values="10; 5; 10" begin="0.15s" dur="555ms" repeatCount="indefinite" />    </rect>    <rect x="16" y="10" width="4" height="10" fill="#333"  opacity="0.2">      <animate attributeName="opacity" values="0.2; 1; .2" begin="0.3s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="height" values="10; 20; 10" begin="0.3s" dur="555ms" repeatCount="indefinite" />      <animate attributeName="y" values="10; 5; 10" begin="0.3s" dur="555ms" repeatCount="indefinite" />    </rect>  </svg>';
}
function killLoader(){
	document.body.removeChild(document.getElementById("loader-elm"));
}
async function getFullProfileDetails(path,j) {
  loadingElm();
  var res = await fetch("https://www.linkedin.com/recruiter/profile/" + path, {
    "credentials": "include",
    "headers": {
      "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
      "accept-language": "en-US,en;q=0.9",
      "upgrade-insecure-requests": "1"
    },
    "referrerPolicy": "no-referrer-when-downgrade",
    "body": null,
    "method": "GET",
    "mode": "cors"
  });
  var textBod = await res.text();
  var dat = reg(/\{"data":\{"breadcrumbs":.+?"contractId":\d+,"memberId":\d+\}\}\}/.exec(textBod.replace(/\n/g, '')), 0);
  var jdat = dat != '' ? JSON.parse(dat) : '';
console.log(jdat);
  var alljobs = jdat.data.positions;
  var specLocal = getGeos();
  var specJob = alljobs[j] ? alljobs[j] : null;
  var specCo = specJob.position.companyId ? 'facet.CC=' + alljobs[j].position.companyId : 'company=' + alljobs[j].position.companyName.replace(/\s+/g, '+')+'&companyTimeScope=C';
  var specTitle = alljobs[j] ? '&jobTitleTimeScope=C' + alljobs[j].position.title : '';
console.log(specTitle);
  var jobbArr = alljobs[j] ? [specCo, specTitle, specLocal] : false;
  var searchString = await otherEmployeesSearch(jobbArr);
  var others = [];
  var otherHTMLdoc = '';

  var otherEmployees = await getOtherEmployees(searchString);

  otherEmployees.forEach(person => {
    var personArr = parseProfData(person);
    if (jdat.data.profile.niid != personArr[0]) others.push(personArr);
  });

  others.forEach(itm => otherHTMLdoc = otherHTMLdoc + buildHTML(itm));
  killLoader();
  createPOPhtml(searchString, [alljobs.length, others.length, j], otherHTMLdoc);

}

function otherEmployeesSearch(arr) {
  if (arr == null) return null;
  var title = arr[1] ? encodeURIComponent(arr[1]
.replace(/\w+\.\s*/, '').replace(/\b\w{1,2}\b\s+/, '').replace(/\(.+?\)\s*/).replace(/\s+/g, ' ')) : '';
console.log(title);
  return 'https://www.linkedin.com/recruiter/api/search?'+arr[0]+'&jobTitle='+title+arr[2]+'&start=0';
}

async function getOtherEmployees(str) {
  var res = await fetch(str, {
    "credentials": "include",
    "headers": {
      "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
      "accept-language": "en-US,en;q=0.9",
      "cache-control": "max-age=0",
      "upgrade-insecure-requests": "1"
    },
    "referrerPolicy": "no-referrer-when-downgrade",
    "body": null,
    "method": "GET",
    "mode": "cors"
  });
  var jdat = await res.json();
  return jdat.result.searchResults;
}

function parseProfData(obj) {
  var firstName = fixCase(obj.firstName);
  var lastName = fixCase(cleanName(obj.lastName));
  var headline = obj.headline;
  var lir_link = 'https://www.linkedin.com/recruiter/profile/' + obj.findAuthInputModel.asUrlParam;
  var geo = obj.location.replace(/, United States/, '');
  var employment = obj.positions;
  var curJobTitle = employment[0].title ? employment[0].title : '';
  var curCo = employment[0].companyName ? employment[0].companyName : '';
  var curJobStart = employment[0].i18nStartDate ? employment[0].i18nStartDate : '';
  var curJobEnd = employment[0].i18nEndDate ? employment[0].i18nEndDate : 'Now';

  var photo = obj.vectorImage ? obj.vectorImage.rootUrl + obj.vectorImage.artifacts[0].fileIdentifyingUrlPathSegment : '';

  var basicArr = [obj.niid, noHTML(firstName), noHTML(lastName), noHTML(headline), geo, lir_link, photo, [noHTML(curJobTitle),noHTML(curCo),curJobStart, curJobEnd]];
  return basicArr;
}

function buildHTML(arr) {
  return '<div id="' + arr[0] + '" style="padding: 10px;">' +
    '<img src=' + arr[6] + ' width="40px" height="40px" style="float: right; color: #0b868e"></img>' +
    '<div><a href="' + arr[5] + '">' + arr[1] + ' ' + arr[2] + '</a></div>' +
    '<div style="font-size: .9em;">' + arr[7][0] +'</div><div style="font-size: .9em; color: #2d2d2d;">'+ arr[7][1] +'</div><div style="font-size: .9em; color: #515151;">'+ arr[7][2] +' - '+ arr[7][3] + '</div>' +
    '<div style="font-size: .9em; color: grey;">' + arr[4] + '</div>' +
    '</div><br>';
}

function printDiv(tempDiv, title) {
  var mywin = window.open('', 'PRINT', 'height=800, width=1200,top=10,left=5');
  mywin.document.write(tempDiv);
  mywin.document.close();
  mywin.focus();
  return true;
}

function createPOPhtml(search, reslen, str) {
console.log(search);
var len = reslen[1] > 5 ? 80 : reslen[1] < 1 ? 20 : (reslen[1] * 18) ; 
  var cDiv = document.createElement("div");
  cDiv.setAttribute("id", "pop_container");
  document.body.appendChild(cDiv);
  cDiv.style.display = "inline-block";
  cDiv.style.position = "fixed";
  cDiv.style.overflow = "scroll";
  cDiv.style.top = "8%";
  cDiv.style.right = "3%";
  cDiv.style.width = "25%";
  cDiv.style.height = len + "%";
  cDiv.style.padding = "3px";
  cDiv.style.background = "#424242";
  cDiv.style.zIndex = "10000";

  var clsBtn = document.createElement("button");
  document.getElementById("pop_container").appendChild(clsBtn);
  clsBtn.setAttribute("id", "btn_close");
  document.getElementById("btn_close").innerText = "+";
  clsBtn.style.position = "fixed";
  clsBtn.style.background = "Transparent";
  clsBtn.style.height = "0px";
  clsBtn.style.width = "0px";
  clsBtn.style.display = "inline-block";
  clsBtn.style.transform = "scale(3.9, 3.9) translate(7px, -15px) rotate(45deg)";
  clsBtn.style.borderRadius = "1em";
  clsBtn.style.padding = "0px";
  clsBtn.style.boxShadow = "0px";
  clsBtn.style.border = "0px";
  clsBtn.style.cursor = "pointer";
  clsBtn.style.userSelect = "none";
  clsBtn.style.fontSize = '1em';
  clsBtn.style.fontWeight = "bold";
  clsBtn.style.color = "Crimson";
  if (reslen[1] > 24) {
    var otherS = document.createElement("button");
    document.getElementById("pop_container").appendChild(otherS);
    otherS.setAttribute("id", "btn_others");
    document.getElementById("btn_others").innerText = "Open This Search";
    otherS.style.position = "fixed";
    otherS.style.background = "#424242";
    otherS.style.display = "inline-block";
    otherS.style.transform = "translate(0px, -55px)";
    otherS.style.borderRadius = ".2em";
    otherS.style.right = "4%";
	otherS.style.border = "3px solid #1c1c1c";
    otherS.style.cursor = "pointer";
    otherS.style.userSelect = "none";
    otherS.style.fontSize = '1em';
    otherS.style.fontWeight = "bold";
    otherS.style.color = "white";
    otherS.addEventListener("click", otherSearch);
  }
  if (reslen[0] > 0) {
    var nextJ = document.createElement("button");
    document.getElementById("pop_container").appendChild(nextJ);
    nextJ.setAttribute("id", "btn_next_"+reslen[0]);
    document.getElementById("btn_next_"+reslen[0]).innerText = "Next Job";
    nextJ.style.position = "fixed";
    nextJ.style.background = "#424242";
    nextJ.style.display = "inline-block";
    nextJ.style.transform = "translate(0px, -30px)";
    nextJ.style.borderRadius = ".2em";
    nextJ.style.right = "4%";
	nextJ.style.border = "3px solid #1c1c1c";
    nextJ.style.cursor = "pointer";
    nextJ.style.userSelect = "none";
    nextJ.style.fontSize = '1em';
    nextJ.style.fontWeight = "bold";
    nextJ.style.color = "white";
    nextJ.addEventListener("click", async ()=>{
		getFullProfileDetails(profilePath,(reslen[2]+1));
		cDiv.style.opacity = "0";
		cDiv.style.transition = "opacity 1888ms";
		await delay(888);
		await close();

	});
  }

  var holder = document.createElement("div");
  document.getElementById("pop_container").appendChild(holder);
  holder.style.background = 'white';
  holder.innerHTML = str;

  if (reslen[1] == 0) {
	holder.style.height = "30%";
  	holder.innerHTML = "No results";
  }

  function close() {
    document.body.removeChild(document.getElementById("pop_container"));
  }

  function otherSearch() {
    window.open(search.replace(/api\//, ''));
  }
  clsBtn.addEventListener("click", close);

}
getFullProfileDetails(profilePath,0);
